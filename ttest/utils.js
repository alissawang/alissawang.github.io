import { areaUnderCurve, roundDecimal, mean } from "../utils/math.js"

export function animateSample(svg, id, graphXValues, y, dataArray) {
    for (let i = 0; i < dataArray.length; i++) {
        let point = dataArray[i];
        setTimeout(function() {
            svg
                .append("circle")
                .attr("r", 8)
                .attr("id", `${id}-points`)
                .attr("cx", graphXValues(point))
                .attr("cy", 0)
                .transition()
                .ease(d3.easeLinear)
                .duration(40)
                .attr("cy", y)
        }, i * 40)
    }

    // svg.append("line")
    //     .attr("id", "mean-line")
    //     .transition()
    //     .delay(40 * dataArray.length + 400)
    //     .attr("x1", graphXValues(mean(dataArray)))
    //     .attr("x2", graphXValues(mean(dataArray)))
    //     .attr("y1", y - 10)
    //     .attr("y2", y - 20)
    //     .style("stroke", "lightblue")
    //     .transition()
    //     .delay(400)
    //     .style("stroke", "steelblue")
    // svg.append("text")
    //     .attr("id", "mean-text")
    //     .transition()
    //     .delay(40 * dataArray.length + 400)
    //     .text(`xÌ„ = ${roundDecimal(mean(dataArray), 2)}`)
    //     .attr("x", sampleXGraphValues(mean(dataArray)))
    //     .attr("y", y - 20)
    //     .style("fill", "lightblue")
    //     .transition()
    //     .delay(400)
    //     .style("fill", "steelblue")
}

export function addFractionSvg(svg, id, numerator, denominator, x, y, fontSize) {
    let maxChars = d3.max([String(numerator).length, String(denominator).length])
    svg.append("text")
        .attr("id", `${id}-numerator`)
        .attr("class", "numerator")
        .style("font-size", fontSize)
        .style("text-anchor", "middle")
        .text(numerator)
        .attr("x", x)
        .attr("y", y - 10)
    svg.append("line")
        .attr("id", `${id}-frac-line`)
        .attr("class", "frac-line")
        .attr("x1", x - (fontSize * (maxChars * 0.25)))
        .attr("x2", x + (fontSize * (maxChars * 0.25)))
        .attr("y1", y)
        .attr("y2", y)
    svg.append("text")
        .attr("id", `${id}-denominator`)
        .attr("class", "denominator")
        .style("font-size", fontSize)
        .style("text-anchor", "middle")
        .text(denominator)
        .attr("dy", "1em")
        .attr("x", x)
        .attr("y", y + 5)
}

export function highlightPArea(svg, id, data, criticalPoint, pdf, xGraphValues, yGraphValues, width, height, margins, nTails = 1){
    svg.selectAll(".dynamic").remove()
    svg.selectAll(".area").remove()
    let pValue = areaUnderCurve(pdf, criticalPoint, xGraphValues.domain()[1], 0.001)
    if (nTails == 2) {
        pValue = pValue * 2;
    }
    svg.append("text")
        .attr("id", `${id}-p-text`)
        .attr("class", "dynamic")
        .text(`p = ${roundDecimal(pValue, 3)}`)
        .attr("x", width - 100)
        .attr("y", height * (3/4))
    var area = d3.area()
        .x0((d) => {return xGraphValues(d.x)})
        .y0(height - margins.bottom)
        .y1((d) => {return yGraphValues(d.y)})
    svg.append("path")
        .datum(data.filter((d) => d.x >= criticalPoint))
        .attr("id", `${id}-p-area`)
        .attr("class", "area")
        .attr("d", area)
        .lower()
    svg.append("line")
        .attr("id", `${id}-p-line`)
        .attr("class", "dynamic")
        .attr("x1", xGraphValues(criticalPoint))
        .attr("x2", xGraphValues(criticalPoint))
        .attr("y1", height - margins.bottom)
        .attr("y2", yGraphValues(pdf(criticalPoint)))
    if (nTails == 2) {
        let [ xStart, xEnd ] = xGraphValues.domain()
        let criticalPoint2 = xStart + (xEnd - criticalPoint)
        svg.append("path")
            .datum(data.filter((d) => d.x <= criticalPoint2))
            .attr("id", `${id}-p-area`)
            .attr("class", "area")
            .attr("d", area)
            .lower()
        svg.append("line")
            .attr("id", `${id}-p-line`)
            .attr("class", "dynamic")
            .attr("x1", xGraphValues(criticalPoint2))
            .attr("x2", xGraphValues(criticalPoint2))
            .attr("y1", height - margins.bottom)
            .attr("y2", yGraphValues(pdf(criticalPoint2)))
        }
}