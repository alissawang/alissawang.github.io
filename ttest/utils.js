import { areaUnderCurve, roundDecimal, mean, standardDeviation } from "../utils/math.js"

export function animateSample(svg, id, graphXValues, y, dataArray) {
    for (let i = 0; i < dataArray.length; i++) {
        let point = dataArray[i];
        setTimeout(function() {
            svg
                .append("circle")
                .attr("r", 8)
                .attr("id", `${id}-points`)
                .attr("class", "dynamic")
                .attr("cx", graphXValues(point))
                .attr("cy", 0)
                .transition()
                .ease(d3.easeLinear)
                .duration(40)
                .attr("cy", y)
        }, i * 40)
    }

    // svg.append("line")
    //     .attr("id", "mean-line")
    //     .transition()
    //     .delay(40 * dataArray.length + 400)
    //     .attr("x1", graphXValues(mean(dataArray)))
    //     .attr("x2", graphXValues(mean(dataArray)))
    //     .attr("y1", y - 10)
    //     .attr("y2", y - 20)
    //     .style("stroke", "lightblue")
    //     .transition()
    //     .delay(400)
    //     .style("stroke", "steelblue")
    // svg.append("text")
    //     .attr("id", "mean-text")
    //     .transition()
    //     .delay(40 * dataArray.length + 400)
    //     .text(`x̄ = ${roundDecimal(mean(dataArray), 2)}`)
    //     .attr("x", sampleXGraphValues(mean(dataArray)))
    //     .attr("y", y - 20)
    //     .style("fill", "lightblue")
    //     .transition()
    //     .delay(400)
    //     .style("fill", "steelblue")
}

export function addFractionSvg(svg, id, numerator, denominator, x, y, fontSize) {
    let maxChars = d3.max([String(numerator).length, String(denominator).length])
    svg.append("text")
        .attr("id", `${id}-numerator`)
        .attr("class", "numerator")
        .style("font-size", fontSize)
        .style("text-anchor", "middle")
        .text(numerator)
        .attr("x", x)
        .attr("y", y - 10)
    svg.append("line")
        .attr("id", `${id}-frac-line`)
        .attr("class", "frac-line")
        .attr("x1", x - (fontSize * (maxChars * 0.2)))
        .attr("x2", x + (fontSize * (maxChars * 0.2)))
        .attr("y1", y + 5)
        .attr("y2", y + 5)
    svg.append("text")
        .attr("id", `${id}-denominator`)
        .attr("class", "denominator")
        .style("font-size", fontSize)
        .style("text-anchor", "middle")
        .text(denominator)
        .attr("dy", "1em")
        .attr("x", x)
        .attr("y", y + 10)
}

export function addSquareRootSvg(svg, x, y, number, fontSize = null, id="") {
    let chars = String(number).length
    svg.append("line")
        .attr("class", "frac-line")
        .attr("x1", x - 5)
        .attr("x2", x + chars * 10)
        .attr("y1", y)
        .attr("y2", y)
    svg.append("line")
        .attr("class", "frac-line")
        .attr("x1", x - 5)
        .attr("x2", x - 10)
        .attr("y1", y)
        .attr("y2", y + (0.5 * fontSize) * 2)
    svg.append("line")
        .attr("class", "frac-line")
        .attr("x1", x - 10)
        .attr("x2", x - 15)
        .attr("y1", y + (0.5 * fontSize) * 2)
        .attr("y2", y + (0.5 * fontSize) * 2 - 7)
    if (fontSize) {
        svg.append("text")
            .text(number)
            .attr("class", "denominator")
            .attr("id", id)
            .attr("x", x)
            .attr("y", y + fontSize)
            .style("font-size", fontSize)
    }
}

export function highlightPArea(svg, id, data, criticalPoint, pdf, xGraphValues, yGraphValues, width, height, margins, nTails = 1){
    svg.selectAll(".dynamic").remove()
    svg.selectAll(".area").remove()
    let endPoint = (criticalPoint < 0) ? xGraphValues.domain()[0] : xGraphValues.domain()[1]
    let pValue = areaUnderCurve(pdf, criticalPoint, endPoint, 0.001)
    if (nTails == 2) {
        pValue = pValue * 2;
    }
    svg.append("text")
        .attr("id", `${id}-p-text`)
        .attr("class", "dynamic")
        .text(`p = ${roundDecimal(pValue, 3)}`)
        .attr("x", width - 100)
        .attr("y", height * (3/4))
    var area = d3.area()
        .x0((d) => {return xGraphValues(d.x)})
        .y0(height - margins.bottom)
        .y1((d) => {return yGraphValues(d.y)})
    let dataToHighlight = (criticalPoint < 0) ? data.filter((d) => d.x <= criticalPoint) : data.filter((d) => d.x >= criticalPoint)
    svg.append("path")
        .datum(dataToHighlight)
        .attr("id", `${id}-p-area`)
        .attr("class", "area")
        .attr("d", area)
        .lower()
    svg.append("line")
        .attr("id", `${id}-p-line`)
        .attr("class", "dynamic")
        .attr("x1", xGraphValues(criticalPoint))
        .attr("x2", xGraphValues(criticalPoint))
        .attr("y1", height - margins.bottom)
        .attr("y2", yGraphValues(pdf(criticalPoint)))
    if (nTails == 2) {
        let [ xStart, xEnd ] = xGraphValues.domain()
        let criticalPoint2 = xStart + (xEnd - criticalPoint)
        let dataToHighlight2 = (criticalPoint2 < 0) ? data.filter((d) => d.x <= criticalPoint2) : data.filter((d) => d.x >= criticalPoint2)
        svg.append("path")
            .datum(dataToHighlight2)
            .attr("id", `${id}-p-area`)
            .attr("class", "area")
            .attr("d", area)
            .lower()
        svg.append("line")
            .attr("id", `${id}-p-line`)
            .attr("class", "dynamic")
            .attr("x1", xGraphValues(criticalPoint2))
            .attr("x2", xGraphValues(criticalPoint2))
            .attr("y1", height - margins.bottom)
            .attr("y2", yGraphValues(pdf(criticalPoint2)))
        }
}

export function varianceTransition(svg, id, data, graphValues, height, margins) {
    let graphData = data.map((d, idx) => { return {"x": d, "y": 70 + (idx * 12)}})
    let mean_ = mean(data)
    let sd = standardDeviation(data)
    svg.selectAll(`#${id}-points`)
        .data(data)
        .enter()
        .append("circle")
        .attr("r", 8)
        .attr("id", `${id}-points`)
        .attr("cx", d => graphValues(d))
        .attr("cy", margins.top + 30)
    svg.append("line")
        .attr("id", `${id}-mean-line`)
        .attr("x1", graphValues(mean_))
        .attr("x2", graphValues(mean_))
        .attr("y1", margins.top + 30)
        .attr("y2", 14 * data.length)
    svg.append("text")
        .text(`x̄ = ${roundDecimal(mean_, 2)}`)
        .attr("id", `${id}-mean-text`)
        .attr("x", graphValues(mean_))
        .attr("y", 10)
    svg.selectAll(`#${id}-diff-points`)
        .data(graphData)
        .enter()
        .append("circle")
        .attr("id", `${id}-diff-points`)
        .attr("class", "dynamic")
        .attr("r", 8)
        .attr("cx", d => graphValues(d.x))
        .attr("cy", margins.top + 30)
        .transition()
        .delay(50)
        .ease(d3.easeLinear)
        .duration(500)
        .attr("cy", d => d.y)

    for (let i = 0; i < graphData.length; i++) {
        let point = graphData[i];
        setTimeout(function() {
                svg.append("line")
                .attr("id", `${id}-diff`)
                .attr("class", "dynamic")
                .attr("x1", graphValues(point.x) + ((point.x > mean_) ? -8 : 8))
                .attr("x2", graphValues(point.x) + ((point.x > mean_) ? -8 : 8))
                .attr("y1", point.y)
                .attr("y2", point.y)
                .transition()
                .delay(500)
                .duration(100)
                .attr("x2", graphValues(mean_))
        }, i * 20)
    }

    setTimeout(function () {
        svg.append("text")
            .text(`standard deviation = ${roundDecimal(sd, 2)}`)
            .attr("class", "dynamic")
            .attr("id", `${id}-sd-text`)
            .attr("x", graphValues(mean_))
            .attr("y", 15 * data.length)
            .style("opacity", 0)
            .transition()
            .duration(500)
            .style("opacity", 100)
        svg.append("line")
            .attr("id", `${id}-sd-line`)
            .attr("class", "dynamic")
            .attr("x1", graphValues(mean_ - (sd / 2)))
            .attr("x2", graphValues(mean_ + (sd / 2)))
            .attr("y1", 15 * data.length + 15)
            .attr("y2", 15 * data.length + 15)
            .style("opacity", 0)
            .transition()
            .duration(500)
            .style("opacity", 100)
        svg.append("line")
            .attr("id", `${id}-sd-line`)
            .attr("class", "dynamic")
            .attr("x1", graphValues(mean_ - (sd / 2)))
            .attr("x2", graphValues(mean_ - (sd / 2)))
            .attr("y1", (15 * data.length + 10))
            .attr("y2", (15 * data.length + 20))
            .style("opacity", 0)
            .transition()
            .duration(500)
            .style("opacity", 100)
        svg.append("line")
            .attr("id", `${id}-sd-line`)
            .attr("class", "dynamic")
            .attr("x1", graphValues(mean_ + (sd / 2)))
            .attr("x2", graphValues(mean_ + (sd / 2)))
            .attr("y1", 15 * data.length + 10)
            .attr("y2", 15 * data.length + 20)
            .style("opacity", 0)
            .transition()
            .duration(500)
            .style("opacity", 100)
    }, 40 * data.length)
}